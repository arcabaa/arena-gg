(()=>{"use strict";var e={376:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const o=r(853),i=r(276);class s extends o.Collider{constructor(e,t,r){super(e,t),this.radius=r}getCenterCoordinates(){return Object.assign({},this.coords)}collidesWith(e){return(0,i.isCircle)(e)?(0,i.circleToCircleCollision)(this,e):!!(0,i.isRectangle)(e)&&(0,i.circleToRectangleCollision)(this,e)}getCenterXOffset(){return this.radius}getCenterYOffset(){return this.radius}}t.default=s},853:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Collider=void 0,t.Collider=class{constructor(e,t){this.coords={x:e,y:t}}isAtCenterOf(e){const t=e.getCenterCoordinates();return this.isAt(t)}isAt(e){const t=this.getCenterCoordinates();return e.x===t.x&&e.y===t.y}get x(){return this.coords.x}set x(e){this.coords.x=e}get y(){return this.coords.y}set y(e){this.coords.y=e}}},218:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const o=r(853),i=r(276);class s extends o.Collider{constructor(e,t,r,o){super(e,t),this.width=r,this.height=o}getCenterCoordinates(){const{coords:{x:e,y:t}}=this;return{x:e+this.width/2,y:t+this.height/2}}collidesWith(e){return(0,i.isCircle)(e)?(0,i.circleToRectangleCollision)(e,this):!!(0,i.isRectangle)(e)&&(0,i.rectangleToRectangleCollision)(this,e)}getCenterXOffset(){return this.width/2}getCenterYOffset(){return this.height/2}}t.default=s},786:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Collider=t.RectangleCollider=t.CircleCollider=void 0;const o=r(376);t.CircleCollider=o.default;const i=r(218);t.RectangleCollider=i.default;const s=r(853);Object.defineProperty(t,"Collider",{enumerable:!0,get:function(){return s.Collider}})},276:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.rectangleToRectangleCollision=t.circleToRectangleCollision=t.circleToCircleCollision=t.isRectangle=t.isCircle=void 0,t.isCircle=function(e){return void 0!==e.radius},t.isRectangle=function(e){return void 0!==e.width&&void 0!==e.height},t.circleToCircleCollision=function(e,t){return Math.pow(e.coords.x-t.coords.x,2)+Math.pow(e.coords.y-t.coords.y,2)<=Math.pow(e.radius+t.radius,2)},t.circleToRectangleCollision=function(e,t){const r=Math.abs(e.coords.x-t.coords.x)-t.width/2,o=Math.abs(e.coords.y-t.coords.y)-t.height/2;return!(r>e.radius||o>e.radius)&&(r<=0||o<=0||Math.pow(r,2)+Math.pow(o,2)<=Math.pow(e.radius,2))},t.rectangleToRectangleCollision=function(e,t){return e.coords.x<=t.coords.x+t.width&&e.coords.x+e.width>=t.coords.x&&e.coords.y<=t.coords.y+t.height&&e.coords.y+e.height>=t.coords.y}},699:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CreatureFactory=t.Projectile=t.Creature=void 0;const o=r(786);class i{}class s extends i{constructor(e){super(),this.speed=e}step(e){const{collider:{coords:t}}=this;if(e&&!this.collider.isAt(e)){const r=e.y-t.y,o=e.x-t.x;let i,s;if(0===o)i=0,s=r;else{const e=r/o;i=this.speed/Math.sqrt(Math.pow(e,2)+1)*Math.sign(o),s=e*i}const l=i>0?Math.min:Math.max,a=s>0?Math.min:Math.max;this.collider.x=l(t.x+i,e.x),this.collider.y=a(t.y+s,e.y)}}}t.Projectile=class extends s{constructor(e,t,r,o,i){super(e),this.damage=t,this.collider=r,this.target=o,this.attack=i}update(){return this.step(this.target.collider.getCenterCoordinates())}};class l extends s{constructor(e,t,r,o){super(t.movementSpeed),this.collider=e,this.baseStats=t,this.goldValue=r,this.targetCoords=o}get x(){return this.collider.x}get y(){return this.collider.y}takeDamage(e){let t=0;this.baseStats.armor<=0?t+=2-100/(100-this.baseStats.armor):t+=100/(100-this.baseStats.armor);let r=0;this.baseStats.magicResist<0?r+=2-100/(100-this.baseStats.magicResist):r+=100/(100-this.baseStats.magicResist);let o=t+r;console.log(o),o+=Math.max(0,e.physicalDamage-this.baseStats.armor),console.log(o),this.baseStats.health=Math.max(0,this.baseStats.health-o),console.log(`health: ${this.baseStats.health}, AD: ${this.baseStats.attackDamage}, damage given: ${o}`)}autoAttack(){return{physicalDamage:this.baseStats.attackDamage,magicDamage:this.baseStats.abilityPower}}update(){this.step(this.targetCoords)}moveTo(e,t){this.targetCoords={x:e-this.collider.getCenterXOffset(),y:t-this.collider.getCenterYOffset()}}stopMovement(){this.targetCoords=Object.assign({},this.collider.coords)}}t.Creature=l;class a{constructor(){}static get(){return a.instance||(a.instance=new a),a.instance}newCreature(e,t){return{withCircleCollider:this.withCircleCollider(Object.assign({},e),t),withRectangleCollider:this.withRectangleCollider(Object.assign({},e),t)}}withRectangleCollider(e,t){return(r,i,s,a)=>{const c=()=>new o.RectangleCollider(r,i,s,a);return{withTargetCoords:this.withTargetCoords(c(),e,t),build:()=>new l(c(),e,t)}}}withCircleCollider(e,t){return(r,i,s)=>{const a=()=>new o.CircleCollider(r,i,s);return{withTargetCoords:this.withTargetCoords(a(),e,t),build:()=>new l(a(),e,t)}}}withTargetCoords(e,t,r){return(o,i)=>({build:()=>new l(e,t,r,{x:o,y:i})})}}t.CreatureFactory=a}},t={};function r(o){var i=t[o];if(void 0!==i)return i.exports;var s=t[o]={exports:{}};return e[o](s,s.exports,r),s.exports}(()=>{const e=r(786),t=r(699),o=document.getElementById("cs-canvas"),i=o.getContext("2d"),s=document.createElement("img");s.src="fizz.jpg";const l={player:t.CreatureFactory.get().newCreature({abilityPower:0,attackDamage:80,armor:0,magicResist:0,movementSpeed:4,maxHealth:100,health:100},300).withRectangleCollider(0,0,75,75).build(),playerGold:0,playerCreepScore:0,minions:[],projectiles:[]};function a(e){i.fillStyle="black";const{collider:{coords:t,width:r}}=e;i.fillRect(t.x,t.y-8,r,5)}function c(e){i.fillStyle="tomato";const{baseStats:t,collider:{coords:r,width:o}}=e,s=o*(t.health/t.maxHealth);i.fillRect(r.x,r.y-8,s,5)}o.addEventListener("contextmenu",(e=>{e.preventDefault(),e.stopPropagation()})),o.addEventListener("mousedown",(r=>{const{x:i,y:s}=function(e){return{x:e.clientX-o.offsetLeft,y:e.clientY-o.offsetTop}}(r);!function(r,o,i){const{player:s}=l;if("right"===i){const i=function(e,t){const r=l.minions.find((r=>r.x<=e&&r.x+r.collider.width>=e&&r.y<=t&&r.y+r.collider.height>=t));return r||null}(r,o);null!==i?function(r,o,i){const s=function(r,o,i){return new t.Projectile(6,10,new e.CircleCollider(r.x,r.y,8),o,i)}(r,o,i);l.projectiles.push(s),l.player.stopMovement()}(s.collider.getCenterCoordinates(),i,s.autoAttack()):s.moveTo(r,o)}else"left"===i&&function(e,r){l.minions.push(function(e,r){return t.CreatureFactory.get().newCreature({abilityPower:0,attackDamage:100,armor:10,magicResist:0,movementSpeed:2,maxHealth:500,health:500},16).withRectangleCollider(e,r,55,55).build()}(e,r))}(r,o)}(i,s,function(e){switch(e){case 0:return"left";case 2:return"right";default:return"other"}}(r.button))})),function e(){var t;l.player.update(),l.projectiles.forEach((e=>e.update())),function(e){const t=e.filter((({collider:e,target:t,attack:r})=>!e.isAtCenterOf(t.collider)||(t.takeDamage(r),!1)));l.projectiles=t}(l.projectiles),function(e,t){const r=e.filter((e=>0!==e.baseStats.health||(function(e){const{goldValue:t}=e;l.playerGold+=t,l.playerCreepScore++}(e),!!t.length)));l.minions=r}(l.minions,l.projectiles),i.clearRect(0,0,o.width,o.height),l.minions.forEach((e=>{i.fillStyle="tomato";const{collider:{coords:t,width:r,height:o}}=e;i.fillRect(t.x,t.y,r,o),a(e),c(e)})),l.projectiles.forEach((e=>{i.fillStyle="green";const{collider:{coords:{x:t,y:r},radius:o}}=e;i.beginPath(),i.arc(t,r,o,0,2*Math.PI),i.fill(),i.closePath()})),t=l.player,i.drawImage(s,t.collider.coords.x,t.collider.coords.y,t.collider.width,t.collider.height),a(t),c(t),requestAnimationFrame(e)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,